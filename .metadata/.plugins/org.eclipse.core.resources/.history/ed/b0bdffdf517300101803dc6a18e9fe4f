package com.boardone;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class BoardDAO {
	
	private static BoardDAO instance = null;
	
	private BoardDAO() {	}

	public static BoardDAO getInstance() {
		
		if(instance ==null) {
			synchronized (BoardDAO.class) {
				instance = new BoardDAO();
			}
		}
		return instance;
	}
	
	// . . . 여기서부터 게시판에 작업할 기능을 하나씩 메소드로 구현하여 추가하면 됨.
	
	/*  실제 데이터베이스에 데이터를 저장할 메소드를 구현
	 * 		insertArticle(BoardVO article)
	 */
	
	public void insertArticle(BoardVO article) {
			
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		//답변글일때
		int num = article.getNum();
		int ref = article.getRef();
		int step = article.getStep();
		int depth = article.getDepth();
		
		int number = 0;
		
		String sql = "";
		
		try {
			con = ConnUtil.getConnection();
			pstmt = con.prepareStatement("select max(num) from board");
			rs = pstmt.executeQuery();
			
			if(rs.next()) number = rs.getInt(1)+1; // 새글일 때
			else number = 1; // 데이터가 없음
			
			//답변글(댓글)일때
			if(num !=0) {
				sql = "update board set step = step+1 where ref = ? and step > ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, step);
				pstmt.executeUpdate();
				step = step + 1 ;
				depth = depth + 1;				
			}else {
				ref = number;
				step = 0;
				depth = 0;
			}
			
			sql = "insert into board(num, writer, email, subject, pass, regdate, "
					+ "ref, step, depth, content, ip) values(board_seq.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, article.getWriter());
			pstmt.setString(2, article.getEmail());
			pstmt.setString(3, article.getSubject());
			pstmt.setString(4, article.getPass());
			pstmt.setTimestamp(5, article.getRegdate());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, step);
			pstmt.setInt(8, depth);
			pstmt.setString(9, article.getContent());
			pstmt.setString(10, article.getIp());
			
			pstmt.executeUpdate();
			
		}catch(Exception e) {
			e.printStackTrace();

		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			
		}
		
	}//insertArticle end

	/*
	 * 글 목록 화면 만들기
	 * 
	 *    전체 글의 개수를 가져올 메소드를 구현함
	 *    int getArticleCount()
	 */

	public int getArticleCount() {
	
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;	
		int x = 0;
		
		try {
			con = ConnUtil.getConnection();
			String sql = "select count(*) from board";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				x = rs.getInt(1);
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}		
		return x;
	}
	
	/*  데이터베이스에 있는 전체 글을 가져다가 리스트에 저장 
	 */
	public List<BoardVO> getArticles(){
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<BoardVO> articleList = null;
		
		try {
			con = ConnUtil.getConnection();
			String sql = "select * from board order by num desc";
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if(rs.next()) { //결과가 있다면
				articleList = new ArrayList<BoardVO>();
				do {
					BoardVO article = new BoardVO();
					article.setNum(rs.getInt("num"));
					article.setWriter(rs.getString("writer"));
					article.setEmail(rs.getString("email"));
					article.setSubject(rs.getString("subject"));
					article.setPass(rs.getString("pass"));
					article.setRegdate(rs.getTimestamp("regdate"));
					article.setReadcount(rs.getInt("readcount"));
					article.setRef(rs.getInt("ref"));
					article.setStep(rs.getInt("step"));
					article.setDepth(rs.getInt("depth"));
					article.setContent(rs.getString("content"));					
					article.setIp(rs.getString("ip"));
					
					articleList.add(article);
				}while(rs.next());
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		return articleList;		
	}
	
	/*
	 *  글 내용 보기
	 *  
	 *    글의 번호를 매개변수로 해서 하나의 글에 대한 상세정보를 
	 *    데이터베이스에서 기져온다 getArticle
	 */

	public BoardVO getArticle(int num) {
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVO article = null;
		
		try {
			con = ConnUtil.getConnection();
			String sql1 = "update board set readcount=readcount+1 where num=?"; //조회수
			pstmt = con.prepareStatement(sql1);
			pstmt.setInt(1, num);
			pstmt.executeUpdate();
			
			String sql2 = "select * from board where num=?"; //번호에 해당하는 글을 가져옴
			pstmt = con.prepareStatement(sql2);
			pstmt.setInt(1, num);
			rs = pstmt.executeQuery();
			//실행후 rs에 저장
			if(rs.next()) {
				//데이터베이스 정보를 가저다 vo에 저장을 함
				article = new BoardVO();
				article.setNum(rs.getInt("num"));
				article.setWriter(rs.getString("writer"));
				article.setEmail(rs.getString("email"));
				article.setSubject(rs.getString("subject"));
				article.setPass(rs.getString("pass"));
				article.setRegdate(rs.getTimestamp("regdate"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setStep(rs.getInt("step"));
				article.setDepth(rs.getInt("depth"));
				article.setContent(rs.getString("content"));					
				article.setIp(rs.getString("ip"));
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		
		return article;
		
	}// end getArticle
	
	/*
	 *   글 수정시에는 글목록보기와 다르게 조회수를 증가시킬 필요가 없당
	 *   조회수를 증가시키는 부분을 제외하고 num에 해당하는 게시글만 가져오는 
	 *   메소드를 구현한다.
	 */
	
	public BoardVO updateGetArticle(int num) {
		// 수정할 글을 가져옴(위메소드와 동일,조회수는 불요) - form.jsp에서 가져와 수정	 - db수정	
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BoardVO article = null;
		
		try {
			con = ConnUtil.getConnection();			
			String sql = "select * from board where num=?"; //번호에 해당하는 글을 가져옴
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, num);
			rs = pstmt.executeQuery();
			//실행후 rs에 저장
			if(rs.next()) {
				//데이터베이스 정보를 가저다 vo에 저장을 함
				article = new BoardVO();
				article.setNum(rs.getInt("num"));
				article.setWriter(rs.getString("writer"));
				article.setEmail(rs.getString("email"));
				article.setSubject(rs.getString("subject"));
				article.setPass(rs.getString("pass"));
				article.setRegdate(rs.getTimestamp("regdate"));
				article.setReadcount(rs.getInt("readcount"));
				article.setRef(rs.getInt("ref"));
				article.setStep(rs.getInt("step"));
				article.setDepth(rs.getInt("depth"));
				article.setContent(rs.getString("content"));					
				article.setIp(rs.getString("ip"));
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}		
		return article;		
	}
	
	
	
	
	
	
	
	
	
	


}


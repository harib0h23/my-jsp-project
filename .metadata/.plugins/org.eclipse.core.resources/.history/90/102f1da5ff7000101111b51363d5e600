package com.boardone;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class BoardDAO {
	
	private static BoardDAO instance = null;
	
	private BoardDAO() {	}

	public static BoardDAO getInstance() {
		
		if(instance ==null) {
			synchronized (BoardDAO.class) {
				instance = new BoardDAO();
			}
		}
		return instance;
	}
	
	// . . . 여기서부터 게시판에 작업할 기능을 하나씩 메소드로 구현하여 추가하면 됨.
	
	/*  실제 데이터베이스에 데이터를 저장할 메소드를 구현
	 * 		insertArticle(BoardVO article)
	 */
	
	public void insertArticle(BoardVO article) {
			
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		//답변글일때
		int num = article.getNum();
		int ref = article.getRef();
		int step = article.getStep();
		int depth = article.getDepth();
		
		int number = 0;
		
		String sql = "";
		
		try {
			con = ConnUtil.getConnection();
			pstmt = con.prepareStatement("select max(num) from board");
			rs = pstmt.executeQuery();
			
			if(rs.next()) number = rs.getInt(1)+1; // 새글일 때
			else number = 1; // 데이터가 없음
			
			//답변글(댓글)일때
			if(num !=0) {
				sql = "update board set step = step+1 where ref = ? and step > ?";
				pstmt = con.prepareStatement(sql);
				pstmt.setInt(1, ref);
				pstmt.setInt(2, step);
				pstmt.executeUpdate();
				step = step + 1 ;
				depth = depth + 1;				
			}else {
				ref = number;
				step = 0;
				depth = 0;
			}
			
			sql = "insert into board(num, writer, email, subject, pass, regdate, "
					+ "ref, step, depth, content, ip) values(board_seq.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, article.getWriter());
			pstmt.setString(2, article.getEmail());
			pstmt.setString(3, article.getSubject());
			pstmt.setString(4, article.getPass());
			pstmt.setTimestamp(5, article.getRegdate());
			pstmt.setInt(6, ref);
			pstmt.setInt(7, step);
			pstmt.setInt(8, depth);
			pstmt.setString(9, article.getContent());
			pstmt.setString(10, article.getIp());
			
			pstmt.executeUpdate();
			
		}catch(Exception e) {
			e.printStackTrace();

		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			
		}
		
	}//insertArticle end

	/*
	 * 글 목록 화면 만들기
	 * 
	 *    전체 글의 개수를 가져올 메소드를 구현함
	 *    int getArticleCount()
	 */

	public int getArticleCount();
	
	
	
}

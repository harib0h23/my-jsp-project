package com.memberone;
//데이터베이스 연동

import java.sql.*;
import java.util.*;

import javax.sql.*;
import javax.naming.*;

public class StudentDAO {
	
	private Connection getConnection() {  // 메소드를 만듬
		Connection con = null;
		
		try {
			
			Context initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
			DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
			con = ds.getConnection();
			
		} catch (Exception e) {
			System.out.println("Connection 생성 실패");
		}
		return con;
	}
	
	// 아이디 중복 검사 메소드 구현
	public boolean idCheck(String id) {  // 데이터베이스에서 가져온 데이터와 비교
		boolean result = true;
		Connection con = null;
		PreparedStatement pstmt = null; // 아이디값을 모르므로 동적으로 가져옴
		ResultSet rs = null;
		
		try { //디비연결
			con = getConnection();  // 위 메소드 호출로 디비가 연결이 됨
			String sql1 = "select * from student where id=?";
			pstmt = con.prepareStatement(sql1);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			if(!rs.next()) result = false;			
		}catch(SQLException s) {
			s.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		return result;
		
	} // end idCheck
	
	// 우편번호를 데이터베이스에서 검색해서 컬렉션에 저장해서 리턴해주는 메소드 구현
	
	public Vector<ZipCodeVo> zipcodeRead(String dong){
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector<ZipCodeVo> vecList = new Vector<ZipCodeVo>();
		
		try {
			con = getConnection();
			String sql = "select * from zipcode where dong like '"+dong+"%'";
			pstmt = con.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				ZipCodeVo tZipcode = new ZipCodeVo();
				tZipcode.setZipcode(rs.getString("zipcode")); /*컬럼명*/
				tZipcode.setSido(rs.getString("sido"));
				tZipcode.setGugun(rs.getString("gugun"));
				tZipcode.setDong(rs.getString("dong"));
				tZipcode.setRi(rs.getString("ri"));
				tZipcode.setBunji(rs.getString("bunji"));
				//벡터에 추가
				vecList.addElement(tZipcode);			
			}	
		}catch(SQLException s){
			s.printStackTrace();
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		
		return vecList;
	}
	
	/*  회원가입 처리구현
	 * 데이터베이스에 회원데이트를 저장하기 위한 메소드 구현
	 */
	
	public boolean memberInsert(StudentVO vo) { 
		Connection con = null;
		PreparedStatement pstmt = null;
		boolean flag = false;
		
		try {
			con = getConnection();
			String sql = "insert into student values(?,?,?,?,?,?,?,?,?,?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getId());
			pstmt.setString(2, vo.getPass());
			pstmt.setString(3, vo.getName());
			pstmt.setString(4, vo.getPhone1());
			pstmt.setString(5, vo.getPhone2());
			pstmt.setString(6, vo.getPhone3());
			pstmt.setString(7, vo.getEmail());
			pstmt.setString(8, vo.getZipcode());
			pstmt.setString(9, vo.getAddress1());
			pstmt.setString(10, vo.getAddress2());
			
			int count = pstmt.executeUpdate();
			if(count > 0 ) flag = true;
		} catch (Exception e) {
			System.out.println("Exception : "+e);
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if (con != null)
					con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		return flag;
	}
	
	/*   로그인 구현
	 * 
	 *   로그인 버튼을 클릭하면 입력한 id/password를 
	 *   데이터베이스에 저장되어 있는 id/password와 비교해서 
	 *   같으면 로그인 성공, 다르면 로그인 실패 처리
	 *   
	 *   int형으로 return받음
	 *   1 : 로그인 성공, 0 : 비밀번호 오류, -1 : 아이디가 존재하지 않음(초기값)
	 */
	
	public int loginCheck(String id, String pass) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int check = -1;  // 아이디가 존재하지 않음이 초기값
		
		try {
			
			con = getConnection();
			String sql = "select pass from student where id=?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				String dbpass = rs.getString("pass");
				if(pass.equals(dbpass)) {
					check = 1; // 로그인 성공
				}else {
					check = 0; // 비밀번호 오류
				}
			}
			
			
			
			
		}catch(Exception e){
			e.printStackTrace();			
		}finally {
			try {
				if(rs!=null)rs.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(pstmt!=null)pstmt.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
			try {
				if(con	!=null)con.close();
			} catch (SQLException ss) {
				ss.printStackTrace();
			}
		}
		return check;
	}
	
	/*   정보수정 
	 * 		- 정보수정 버튼을 클릭하면 현재 로그인한 회원의 정보를 수정할 수 있도록
	 * 		  미리 데이터베이스에서 정보를 가져온다.
	 * 		  회원정보를 가져올 메소드 구현
	 * 		  getMember(String id)   <= 현재 로그인 한 id   
	 * 
	 */
	
	public StudentVO getMember(String id) { //java
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StudentVO vo = null;
		
		try {
			String sql = "select * from student where id=?"; //sql
			con = getConnection();
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, id);  //위 매개변수 id임
			
			rs = pstmt.executeQuery();
			if(rs.next()) {  // 해당 아이디에 해당하는 회원이 존재한다면
				vo = new StudentVO();
				vo.setId(rs.getString("id"));
				vo.setPass(rs.getString("pass"));
				vo.setName(rs.getString("name"));
				vo.setPhone1(rs.getString("phone1"));
				vo.setPhone2(rs.getString("phone2"));
				vo.setPhone3(rs.getString("phone3"));
				vo.setEmail(rs.getString("email"));
				vo.setZipcode(rs.getString("zipcode"));
				vo.setAddress1(rs.getString("address1"));
				vo.setAddress2(rs.getString("address2"));   // 데이터베이스의 정보를 가져왔음.
			}			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
		try {
			if(pstmt!=null)pstmt.close();
		} catch (SQLException ss) {
			ss.printStackTrace();
		}
		try {
			if(con	!=null)con.close();
		} catch (SQLException ss) {
			ss.printStackTrace();
		}
		
		}
		return vo;
		
	}
	
	/*		회원정보 수정 버튼을 클릭하면 데이터베이스에서 수정처리를 실행한다.
	 * 		반환받을 값이 없음 -> void
	 */
	
	public void updateMember(StudentVO vo) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = getConnection();
			String sql = "update set";  //정보수정하는 커리문
			pstmt = con.prepareStatement(sql);
			
			
		}
	}
	
	

}
